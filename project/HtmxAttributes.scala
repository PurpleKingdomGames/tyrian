import sbt._
import scala.sys.process._

object HtmxAttributes {
  lazy val htmxAttrs = List(
    Normal("hxOn", "hx-on"), // TODO: this is the deprecated version, should be hx-on:event

    Normal("hxBoost", "hx-boost"),
    Normal("hxGet", "hx-get"),
    Normal("hxPost", "hx-post"),
    Normal("hxPushUrl", "hx-push-url"),
    Normal("hxSelect", "hx-select"),
    Normal("hxSelectOob", "hx-select-oob"),
    Normal("hxSwap", "hx-swap"),
    Normal("hxSwapOob", "hx-swap-oob"),
    Normal("hxTarget", "hx-target"),
    Normal("hxTrigger", "hx-trigger"),
    Normal("hxVals", "hx-vals"),
    Normal("hxConfirm", "hx-confirm"),
    Normal("hxDelete", "hx-delete"),
    NoValue("hxDisable", "hx-disable"),
    Normal("hxDisabledElt", "hx-disabled-elt"),
    Normal("hxDisinherit", "hx-disinherit"),
    Normal("hxEncoding", "hx-encoding"),
    Normal("hxExt", "hx-ext"),
    Normal("hxHeaders", "hx-headers"),
    Normal("hxHistory", "hx-history").withTypes("String", "Boolean"),
    NoValue("hxHistoryElt", "hx-history-elt"),
    Normal("hxInclude", "hx-include"),
    Normal("hxIndicator", "hx-indicator"),
    Normal("hxParams", "hx-params"),
    Normal("hxPatch", "hx-patch"),
    NoValue("hxPreserve", "hx-preserve"),
    Normal("hxPrompt", "hx-prompt"),
    Normal("hxPut", "hx-put"),
    Normal("hxReplaceUrl", "hx-replace-url").withTypes("String", "Boolean"),
    Normal("hxRequest", "hx-request"),
    Normal("hxSync", "hx-sync"),
    Normal("hxValidate", "hx-validate"),
    Normal("hxVars", "hx-vars")
  )

  lazy val wsExtension = List(
    Normal("wsConnect", "ws-connect"),
    NoValue("wsSend", "ws-send")
  )

  def htmxAttrsList: AttributesList = AttributesList(htmxAttrs ++ wsExtension, List(), "HtmxAttributes")

  def genAttr(tag: AttributeType, isAttribute: Boolean): String =
    tag match {
      case Normal("hxTrigger", Some("hx-trigger"), _) => genHtmxTrigger
      case Normal(name, attrName, types)              => AttributeGen.genNormal(name, attrName, types)
      case NoValue(name, attrName)                    => AttributeGen.genNoValue(name, attrName)
      case EventEmitting(name, attrName, eventType)   => ""
    }

  def triggerAttributeName: String =
    s"""  final class AttributeNameTrigger(name: String):
             |    def :=(value: Trigger): Attribute = Attribute(name.toString, value.render)
             |  final class AttributeNameTriggers(name: String):
             |    def :=(values: List[Trigger]): Attribute = Attribute(name.toString, values.map(_.render).mkString(","))
             |""".stripMargin

  def genHtmxTrigger: String = {
    val res = s"""  @targetName("hxTrigger-Trigger")
    |  val hxTrigger: AttributeNameTrigger = AttributeNameTrigger("hx-trigger")
    |  @targetName("hxTrigger-Triggers")
    |  val hxTrigger: AttributeNameTriggers = AttributeNameTriggers("hx-trigger")
    |  @targetName("hxTrigger-String")
    |  val hxTrigger: AttributeNameString = AttributeNameString("hx-trigger")
    |""".stripMargin

    "\n" + res + "\n"
  }

  def template(moduleName: String, fullyQualifiedPath: String, contents: String): String =
    s"""package $fullyQualifiedPath
    |
    |import tyrian.*
    |import scala.annotation.targetName
    |
    |// GENERATED by AttributeGen.scala - DO NOT EDIT
    |trait $moduleName {
    |
    |$contents
    |
    |}
    """.stripMargin

  def gen(fullyQualifiedPath: String, sourceManagedDir: File)(attributesList: AttributesList): File =
    attributesList match {
      case AttributesList(attrs, props, name) =>
        val file: File =
          sourceManagedDir / s"$name.scala"

        if (!file.exists()) {
          println("Generating Html Attributes")

          val contents: String =
            triggerAttributeName +
              "\n\n  // Attributes\n\n" +
              attrs.map(a => genAttr(a, true)).mkString +
              "\n\n  // Properties\n\n" +
              props.map(p => genAttr(p, false)).mkString

          val newContents: String =
            template(name, fullyQualifiedPath, contents)

          IO.write(file, newContents)

          println("Written: " + file.getCanonicalPath)
        }

        file
    }
}
